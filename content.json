[{"title":"Vue.js 清单(二)","date":"2016-12-23T12:19:04.000Z","path":"2016/12/23/Vue-js-清单-二/","text":"模板语法 各种 v-指令,进行数据绑定,{ {} }是 v-bind:text 的简写,{ {} }只能在尖括号之间插入 绑定html 元素的属性使用 v-bind:attr=“data” 语法 v-指令绑定的值可以使用 JavaScript 表达式:eg. 123&#123; &#123; number + 1 &#125; &#125;&#123; &#123; message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125; &#125;&lt;div v-bind:id=&quot;&apos;list-&apos; + id&quot;&gt;&lt;/div&gt; 但有个限制就是，每个绑定都只能包含单个表达式(除了 v-for)，所以下面的例子都不会生效。 1234&lt;!-- 这是语句，不是表达式 --&gt;&#123; &#123; var a = 1 &#125; &#125;&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;&#123; &#123; if (ok) &#123; return message &#125; &#125; &#125; 两个最常用的v指令 v-bind 与 v-on 缩写:v-bind:href—————&gt;:hrefv-on:click——————&gt;:@click vue 实例的计算属性 $computed 与 $methods 属性的区别:$computed 的计算基于 $computed 依赖的值,只要其依赖的值没有发生变化,$computed 就会立即返回前一次计算的值.而 methods 则每次调用都会重新计算. computed 具体使用方法(注意其中 get 与 set 的思想); $watch 与 $computed,通常使用 computed 更好. (watch 多用于回调? watch 观察的数据被外部修改时,watch 才会被调用) v-if v-show v-elsev-if 与 v-show 的不同点 按键修饰符","tags":[{"name":"vue","slug":"vue","permalink":"https://ra1ning.github.io/tags/vue/"}]},{"title":"Vue.js 清单(一)","date":"2016-12-23T11:56:48.000Z","path":"2016/12/23/Vue-js-清单-一/","text":"初探 v-bind:attr=“data”eg. v-bind:title 绑定属性到元素上 v-if=“data” v-on:event=“handle” 绑定事件 在 Vue 里，一个组件实质上是一个拥有预定义选项的一个 Vue 实例 父子组件消息传递初探:父组件向子组件传值.子元组件暴露一个 props 字段给父组件,父组件将值赋给 props 属性,从而起到父组件传值给子组件的作用, 父子传值初探 在实例化 Vue 时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 API 文档中查看。 可以扩展 Vue 构造器，从而用预定义选项创建可复用的组件构造器： var MyComponent = Vue.extend({ // 扩展选项 }) // 所有的 MyComponent 实例都将以预定义的扩展选项被创建 var myComponentInstance = new MyComponent() 每个 Vue 实例都会代理其 data 对象里所有的属性,只有这些被代理的属性是响应的。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。 除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 $，以便与代理的 data 属性区分。eg. vm.$el===document.getElementById(‘example’) //true, 如果不加$,且 data 中刚好有个属性也叫 el ,此时 vm.$el 与 vm.el 混淆. 组件生命周期","tags":[{"name":"vue","slug":"vue","permalink":"https://ra1ning.github.io/tags/vue/"}]},{"title":"git常用命令","date":"2016-12-23T11:53:50.000Z","path":"2016/12/23/git常用命令/","text":"pwd-Print Working Directory git init 添加文件到Git仓库，分两步：第一步，使用命令git add ，注意，可反复多次使用，添加多个文件；第二步，使用命令git commit，完成。 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。 git reset –hard HEAD^ 回退到上一个版本库 git diff 用来比较工作区保存内容与缓存区内容之间的差异 git checkout —filename 将工作区内容回退到与最近最近记录暂存区相同 git reset HEAD file可以把暂存区的修改撤销掉（unstage），并重新放回工作区 查看分支：git branch 创建分支：git branch 切换分支：git checkout 创建+切换分支：git checkout -b 合并某分支到当前分支：git merge 删除分支：git branch -d 将本地文件推送到 github git remote add origin git@github.com:michaelliao/.git git push -u origin master#参数u将本地仓库与远程建立关联之后推送文件到项目只需使用 git push -u origin master","tags":[{"name":"git","slug":"git","permalink":"https://ra1ning.github.io/tags/git/"}]}]